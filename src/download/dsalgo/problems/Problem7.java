package download.dsalgo.problems;

import java.util.Arrays;

public class Problem7 {

	public static void main(String[] args) {
		int[] array = // {389, 299, 65, 518, 361, 103, 342, 406, 24, 79, 192,
						// 181, 178, 205, 38, 298, 218, 143, 446, 324, 82, 41,
						// 312, 166, 252, 59, 91, 6, 248, 395, 157, 332, 352,
						// 57, 106, 246, 506, 261, 16, 470, 224, 228, 286, 121,
						// 193, 241, 203, 36, 264, 234, 386, 471, 225, 466, 81,
						// 58, 253, 468, 31, 197, 15, 282, 334, 171, 358, 209,
						// 213, 158, 355, 243, 75, 411, 43, 485, 291, 270, 25,
						// 100, 194, 476, 70, 402, 403, 109, 322, 421, 313, 239,
						// 327, 238, 257, 433, 254, 328, 163, 436, 520, 437,
						// 392, 199, 63, 482, 222, 500, 454, 84, 265, 508, 416,
						// 141, 447, 258, 384, 138, 47, 156, 172, 319, 137, 62,
						// 85, 154, 97, 18, 360, 244, 272, 93, 263, 262, 266,
						// 290, 369, 357, 176, 317, 383, 333, 204, 56, 521, 502,
						// 326, 353, 469, 455, 190, 393, 453, 314, 480, 189, 77,
						// 129, 439, 139, 441, 443, 351, 528, 182, 101, 501,
						// 425, 126, 231, 445, 155, 432, 418, 95, 375, 376, 60,
						// 271, 74, 11, 419, 488, 486, 54, 460, 321, 341, 174,
						// 408, 131, 115, 107, 134, 448, 532, 292, 289, 320, 14,
						// 323, 61, 481, 371, 151, 385, 325, 472, 44, 335, 431,
						// 187, 51, 88, 105, 145, 215, 122, 162, 458, 52, 496,
						// 277, 362, 374, 26, 211, 452, 130, 346, 10, 315, 459,
						// 92, 531, 467, 309, 34, 281, 478, 477, 136, 519, 196,
						// 240, 12, 288, 302, 119, 356, 503, 527, 22, 27, 55,
						// 343, 490, 127, 444, 308, 354, 278, 497, 191, 294,
						// 117, 1, 396, 125, 148, 285, 509, 208, 382, 297, 405,
						// 245, 5, 330, 311, 133, 274, 275, 118, 463, 504, 39,
						// 99, 442, 337, 169, 140, 104, 373, 221, 499, 413, 124,
						// 510, 159, 465, 80, 276, 83, 329, 524, 255, 387, 259,
						// 397, 491, 517, 23, 4, 230, 48, 349, 412, 142, 114,
						// 487, 381, 164, 35, 67, 498, 73, 440, 108, 226, 96,
						// 132, 144, 207, 235, 33, 69, 128, 236, 364, 198, 475,
						// 173, 493, 150, 90, 515, 111, 68, 232, 340, 112, 526,
						// 492, 512, 495, 429, 146, 336, 17, 350, 251, 7, 184,
						// 76, 380, 359, 293, 19, 49, 345, 227, 212, 430, 89,
						// 474, 279, 201, 398, 347, 273, 37, 185, 177, 102, 304,
						// 295, 422, 94, 426, 514, 116, 183, 180, 494, 42, 305,
						// 152, 390, 30, 247, 451, 32, 388, 331, 78, 424, 368,
						// 394, 188, 306, 449, 8, 214, 120, 179, 280, 511, 409,
						// 338, 153, 507, 370, 461, 217, 161, 483, 147, 242, 86,
						// 417, 268, 71, 462, 420, 167, 513, 379, 307, 522, 435,
						// 113, 296, 457, 525, 45, 529, 423, 427, 2, 438, 64,
						// 316, 46, 40, 13, 516, 367, 233, 110, 318, 250, 283,
						// 216, 186, 310, 237, 377, 365, 175, 479, 378, 66, 414,
						// 473, 165, 210, 50, 348, 372, 363, 339, 20, 168, 284,
						// 415, 505, 206, 53, 223, 434, 202, 123, 399, 400, 135,
						// 269, 428, 219, 456, 28, 464, 267, 489, 98, 391, 195,
						// 366, 300, 484, 533, 229, 213, 149, 160, 256, 303,
						// 530, 301, 29, 404, 344, 401, 220, 287, 9, 407, 170,
						// 450, 523, 249, 72, 410, 3, 21, 200, 260};
				 //{ 3, 1, 2, 5, 3 };
				//{ 2, 2 };
			{ 336, 156, 10, 571, 35, 798, 632, 257, 317, 969, 758, 808, 682, 271, 623, 205, 795, 477, 562, 306, 796, 839, 104, 463, 636, 87, 51, 438, 19, 598, 98, 976, 244, 508, 324, 627, 124, 341, 498, 557, 149, 825, 235, 74, 535, 413, 489, 410, 431, 179, 964, 898, 534, 101, 555, 845, 742, 855, 174, 159, 436, 79, 254, 282, 545, 428, 64, 726, 698, 264, 899, 856, 648, 195, 145, 705, 704, 34, 597, 423, 593, 96, 158, 538, 287, 762, 630, 454, 354, 953, 807, 672, 404, 647, 332, 1, 690, 510, 286, 356, 937, 846, 23, 418, 943, 543, 402, 374, 559, 743, 441, 880, 198, 204, 738, 78, 320, 234, 773, 47, 71, 975, 603, 666, 585, 542, 932, 150, 885, 72, 166, 460, 699, 82, 14, 883, 814, 915, 490, 655, 527, 711, 39, 978, 333, 437, 375, 302, 493, 252, 93, 844, 500, 634, 403, 119, 91, 590, 792, 642, 111, 560, 46, 888, 591, 828, 140, 771, 497, 22, 417, 155, 116, 903, 707, 757, 15, 974, 18, 727, 484, 261, 109, 734, 132, 118, 858, 751, 565, 151, 813, 787, 776, 222, 697, 391, 388, 384, 518, 3, 353, 635, 260, 486, 36, 544, 207, 620, 30, 450, 208, 504, 407, 889, 246, 956, 449, 478, 824, 322, 171, 144, 216, 877, 89, 165, 380, 479, 227, 495, 343, 181, 247, 125, 564, 323, 103, 187, 378, 381, 415, 296, 45, 509, 622, 900, 49, 396, 328, 12, 202, 349, 133, 644, 605, 307, 547, 715, 68, 16, 960, 143, 334, 481, 239, 615, 421, 256, 789, 8, 69, 553, 896, 139, 770, 955, 722, 923, 184, 40, 602, 790, 712, 7, 400, 961, 874, 521, 794, 32, 650, 621, 957, 810, 589, 523, 283, 720, 308, 94, 962, 127, 665, 608, 422, 679, 169, 465, 819, 277, 281, 31, 300, 267, 44, 881, 83, 831, 733, 673, 639, 694, 609, 38, 420, 653, 551, 977, 670, 618, 435, 909, 827, 594, 973, 660, 502, 766, 576, 809, 134, 784, 677, 251, 414, 717, 879, 755, 656, 740, 737, 475, 301, 759, 135, 494, 340, 223, 206, 924, 488, 767, 190, 841, 113, 310, 882, 600, 468, 607, 194, 514, 664, 893, 360, 121, 532, 718, 350, 243, 439, 95, 833, 861, 671, 269, 209, 312, 43, 230, 315, 347, 505, 123, 691, 581, 970, 683, 162, 352, 355, 517, 425, 303, 596, 785, 572, 329, 843, 933, 383, 904, 182, 894, 895, 780, 786, 278, 686, 917, 669, 626, 424, 852, 875, 148, 240, 887, 75, 793, 667, 482, 401, 526, 797, 922, 599, 641, 637, 58, 676, 224, 61, 820, 631, 908, 274, 405, 548, 157, 558, 817, 102, 805, 515, 702, 732, 496, 351, 965, 105, 935, 316, 335, 629, 367, 279, 595, 926, 59, 447, 552, 2, 942, 200, 949, 164, 90, 865, 213, 853, 373, 426, 616, 345, 456, 37, 305, 963, 567, 779, 327, 735, 258, 918, 314, 366, 756, 86, 761, 911, 563, 577, 516, 729, 372, 583, 891, 569, 582, 849, 173, 474, 680, 511, 73, 52, 472, 835, 765, 614, 319, 321, 298, 363, 433, 958, 802, 393, 275, 192, 713, 610, 70, 781, 788, 700, 160, 189, 67, 588, 640, 748, 867, 128, 812, 457, 92, 573, 643, 709, 57, 387, 434, 549, 326, 362, 876, 652, 455, 651, 913, 507, 579, 719, 331, 633, 292, 927, 513, 172, 210, 830, 736, 749, 628, 146, 829, 100, 13, 522, 890, 716, 120, 276, 294, 768, 440, 921, 499, 525, 186, 939, 971, 268, 753, 912, 272, 854, 871, 847, 5, 62, 175, 442, 191, 657, 859, 136, 197, 692, 77, 884, 838, 568, 561, 578, 587, 941, 170, 361, 27, 832, 152, 944, 138, 575, 520, 48, 241, 540, 816, 741, 731, 106, 570, 863, 11, 330, 201, 141, 212, 868, 663, 193, 419, 225, 769, 299, 339, 467, 81, 857, 840, 951, 744, 617, 214, 783, 750, 338, 24, 445, 126, 803, 901, 430, 398, 76, 907, 947, 972, 65, 129, 801, 892, 55, 153, 777, 703, 476, 537, 291, 506, 382, 470, 231, 775, 938, 800, 304, 860, 916, 448, 232, 914, 364, 572, 412, 25, 945, 348, 601, 919, 706, 17, 369, 368, 929, 117, 233, 115, 273, 289, 624, 411, 725, 925, 556, 185, 842, 365, 491, 459, 746, 325, 416, 823, 870, 747, 730, 337, 6, 480, 451, 395, 778, 529, 452, 464, 142, 649, 811, 183, 249, 931, 782, 714, 873, 385, 658, 566, 930, 377, 154, 487, 869, 376, 297, 97, 905, 708, 242, 406, 485, 804, 358, 248, 386, 574, 215, 444, 821, 710, 760, 29, 458, 236, 541, 674, 469, 180, 872, 108, 466, 533, 311, 646, 645, 584, 80, 107, 774, 427, 178, 968, 53, 681, 866, 724, 906, 721, 218, 959, 837, 211, 293, 318, 203, 822, 446, 948, 902, 85, 586, 952, 266, 654, 238, 99, 137, 688, 295, 611, 371, 826, 531, 42, 399, 897, 668, 188, 772, 313, 483, 612, 161, 851, 799, 392, 344, 954, 370, 492, 263, 606, 836, 693, 723, 554, 536, 501, 237, 604, 675, 862, 245, 695, 270, 110, 864, 309, 967, 131, 288, 429, 684, 524, 920, 950, 112, 122, 130, 503, 408, 397, 221, 88, 262, 4, 259, 550, 471, 613, 928, 84, 432, 473, 280, 285, 678, 936, 592, 659, 33, 290, 806, 265, 394, 66, 28, 662, 147, 63, 219, 546, 878, 689, 739, 228, 9, 910, 539, 167, 791, 764, 41, 528, 625, 60, 745, 848, 834, 453, 217, 966, 379, 946, 342, 255, 687, 409, 229, 56, 701, 220, 26, 226, 20, 389, 168, 519, 114, 284, 163, 54, 250, 940, 638, 196, 818, 752, 462, 253, 661, 696, 763, 815, 359, 443, 357, 728, 50, 754, 619, 21, 346, 177, 530, 685, 461, 390, 934, 580, 199, 886, 176, 512 
};

		System.out.println((long) Integer.MAX_VALUE * Integer.MAX_VALUE);

		Problem7 problem = new Problem7();
		int[] rep = problem.repeatedNumber(array);
		System.out.println(Arrays.toString(rep));
	}

	public int[] repeatedNumber(int[] array) {

		int length = array.length;
		long delta = 0;
		for (int i = 0; i < length; i++) {
			delta += array[i] - (i + 1);
		}

		long sqDelta = 0;
		for (int i = 0; i < length; i++) {
			sqDelta += (array[i] * array[i]) - ((i + 1) * (i + 1));
		}

		long numSum = (int) (sqDelta / delta);
		int rep = (int) (numSum + delta) / 2;

		System.out.println(delta);
		System.out.println(sqDelta);

		return new int[] { rep, (int) (numSum - rep) };

	}
	static void getTwoElements(int arr[]) {
		/*
		 * Will hold xor of all elements and numbers from 1 to n
		 */
		int xor1;

		/* Will have only single set bit of xor1 */
		int set_bit_no;

		int i;
		int x = 0;
		int y = 0;
		int n = arr.length;

		xor1 = arr[0];

		/* Get the xor of all array elements */
		for (i = 1; i < n; i++)
			xor1 = xor1 ^ arr[i];

		/*
		 * XOR the previous result with numbers from 1 to n
		 */
		for (i = 1; i <= n; i++)
			xor1 = xor1 ^ i;

		/* Get the rightmost set bit in set_bit_no */
		set_bit_no = xor1 & ~(xor1 - 1);

		/*
		 * Now divide elements into two sets by comparing rightmost set bit of
		 * xor1 with the bit at the same position in each element. Also, get
		 * XORs of two sets. The two XORs are the output elements. The following
		 * two for loops serve the purpose
		 */
		for (i = 0; i < n; i++) {
			if ((arr[i] & set_bit_no) != 0)
				/* arr[i] belongs to first set */
				x = x ^ arr[i];

			else
				/* arr[i] belongs to second set */
				y = y ^ arr[i];
		}
		for (i = 1; i <= n; i++) {
			if ((i & set_bit_no) != 0)
				/* i belongs to first set */
				x = x ^ i;

			else
				/* i belongs to second set */
				y = y ^ i;
		}

		/* *x and *y hold the desired output elements */
	}
}
